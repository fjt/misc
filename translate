#!/usr/bin/ruby
class Array
  def filter(&bl)
     self.inject([]){|r, e| if e=bl.call(e)
                              r.push(e)
                            else
                              r
                            end}
#    self.map(&bl).map{|e|nil if e == false}.compact
  end

end

class String
  def translate(arg={})
    require "uri"
    require "open-uri"
    require "nokogiri"
    src=(arg[:src] or "ja")
    dst=(arg[:dst] or "en")
    interwiki="interlanguage-link interwiki-#{dst}"
    clasregexp=Regexp.new(interwiki+".*")
    #    xpath='//li[@class="interlanguage-link ' + interwiki + '"]'
        xpath='//li'
    str=URI.encode_www_form_component(self)
    begin
      doc=Nokogiri::HTML(URI.open("https://#{src}.wikipedia.org/wiki/#{str}"))
    rescue OpenURI::HTTPError
      doc=Nokogiri::HTML(URI.open("https://#{src}.wiktionary.org/wiki/#{str}"))
      return "https://#{src}.wikipedia.org/wiki/#{str}"
    end
    begin
      ##      URI::decode(doc.xpath(xpath).children.first.attributes["href"].value.gsub("//#{dst}.wikipedia.org/wiki/", "")).gsub('_', ' ')
      URI.decode_www_form_component(doc.xpath(xpath).to_a.filter{|e|
                    if e.attributes["class"] and e.attributes["class"].value[clasregexp]
                      e
                    end}.first.children.first.attributes['href'].value.gsub("https://#{dst}.wikipedia.org/wiki/", "")).gsub('_', ' ')
    # rescue NoMethodError
    #   return nil
    end
  end
end

string, src, dst = ARGV

print string.translate(src:src, dst:dst), "\n"
